/**
 * Sistema automatizado de actualizaci√≥n de palabras clave para docentes
 * Este script configura la sincronizaci√≥n autom√°tica de nombres de docentes
 */

async function setupTeacherSync() {
    console.log('‚öôÔ∏è Configurando sistema de sincronizaci√≥n autom√°tica de docentes...\n');
    
    const fs = await import('fs/promises');
    const path = await import('path');
    
    try {
        // 1. Crear directorio cache si no existe
        const cacheDir = './cache';
        try {
            await fs.access(cacheDir);
        } catch {
            await fs.mkdir(cacheDir, { recursive: true });
            console.log('üìÅ Creado directorio cache');
        }
        
        // 2. Ejecutar sincronizaci√≥n inicial
        console.log('üîÑ Ejecutando sincronizaci√≥n inicial...');
        const { syncTeacherKeywords } = await import('./sync-teacher-keywords.cjs');
        const synced = await syncTeacherKeywords();
        
        if (synced) {
            console.log('‚úÖ Sincronizaci√≥n inicial completada');
        } else {
            console.log('‚ÑπÔ∏è No se requirieron cambios en la sincronizaci√≥n inicial');
        }
        
        // 3. Configurar el auto-update-system para incluir teacher sync
        console.log('\nüìã Configurando automatizaci√≥n...');
        
        const autoUpdatePath = './scripts/auto-update-system.cjs';
        let autoUpdateContent = '';
        
        try {
            autoUpdateContent = await fs.readFile(autoUpdatePath, 'utf8');
        } catch (error) {
            console.log('‚ö†Ô∏è Archivo auto-update-system.cjs no encontrado, creando uno b√°sico...');
            autoUpdateContent = `/**
 * Sistema autom√°tico de actualizaci√≥n de datos del chatbot
 */

async function runAutoUpdate() {
    console.log('ü§ñ Iniciando actualizaci√≥n autom√°tica del sistema...');
    
    // Aqu√≠ se ejecutan las tareas de actualizaci√≥n
    console.log('‚úÖ Actualizaci√≥n autom√°tica completada');
}

// Ejecutar si es llamado directamente
if (require.main === module) {
    runAutoUpdate().catch(console.error);
}

module.exports = { runAutoUpdate };
`;
        }
        
        // Verificar si ya incluye teacher sync
        if (!autoUpdateContent.includes('sync-teacher-keywords')) {
            // Agregar teacher sync al auto-update-system
            const syncImport = "    const { autoSyncTeachers } = await import('./sync-teacher-keywords.cjs');\n";
            const syncCall = "    \n    // Sincronizar nombres de docentes con palabras clave\n    await autoSyncTeachers();\n";
            
            // Insertar despu√©s de console.log inicial
            autoUpdateContent = autoUpdateContent.replace(
                "console.log('ü§ñ Iniciando actualizaci√≥n autom√°tica del sistema...');",
                "console.log('ü§ñ Iniciando actualizaci√≥n autom√°tica del sistema...');\n" + syncImport
            );
            
            // Insertar llamada antes del console.log final
            autoUpdateContent = autoUpdateContent.replace(
                "console.log('‚úÖ Actualizaci√≥n autom√°tica completada');",
                syncCall + "    console.log('‚úÖ Actualizaci√≥n autom√°tica completada');"
            );
            
            await fs.writeFile(autoUpdatePath, autoUpdateContent, 'utf8');
            console.log('‚úÖ Auto-update-system configurado para incluir sincronizaci√≥n de docentes');
        } else {
            console.log('‚ÑπÔ∏è Auto-update-system ya incluye sincronizaci√≥n de docentes');
        }
        
        // 4. Mostrar instrucciones de uso
        console.log('\nüìñ INSTRUCCIONES DE USO:\n');
        console.log('üîß SINCRONIZACI√ìN MANUAL:');
        console.log('   node scripts/sync-teacher-keywords.cjs --force');
        console.log('   (Fuerza la actualizaci√≥n sin verificar cambios)');
        
        console.log('\nü§ñ SINCRONIZACI√ìN AUTOM√ÅTICA:');
        console.log('   node scripts/auto-update-system.cjs');
        console.log('   (Verifica cambios y sincroniza solo si es necesario)');
        
        console.log('\n‚è∞ PROGRAMACI√ìN AUTOM√ÅTICA:');
        console.log('   - Windows: Usar Programador de Tareas');
        console.log('   - Linux/Mac: Usar crontab');
        console.log('   - Ejemplo cron (cada hora): 0 * * * * cd /path/to/chatbot && node scripts/auto-update-system.cjs');
        
        console.log('\nüîç VERIFICAR FUNCIONAMIENTO:');
        console.log('   1. Agregar un nuevo docente a la base de datos');
        console.log('   2. Ejecutar: node scripts/sync-teacher-keywords.cjs --force');
        console.log('   3. Probar b√∫squeda del nuevo docente en el chatbot');
        
        console.log('\nüìä MONITOREO:');
        console.log('   - Los logs mostrar√°n cu√°ndo se detectan cambios');
        console.log('   - El archivo cache/teachers-hash.txt guarda el estado actual');
        console.log('   - Las b√∫squedas por nombre funcionar√°n autom√°ticamente');
        
        console.log('\n‚úÖ ¬°Sistema configurado exitosamente!');
        
    } catch (error) {
        console.error('‚ùå Error durante la configuraci√≥n:', error.message);
        throw error;
    }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
    setupTeacherSync().catch(console.error);
}

module.exports = { setupTeacherSync };