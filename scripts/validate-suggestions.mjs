#!/usr/bin/env node

/**
 * Script de Validaci√≥n R√°pida del Sistema de Sugerencias
 * Valida que todas las funcionalidades est√©n operativas
 */

import fetch from 'node-fetch';
import { logger } from '../src/utils/logger.js';

const BASE_URL = 'http://localhost:3001';

async function validateSuggestionsSystem() {
  console.log('üîç Iniciando validaci√≥n del sistema de sugerencias...\n');
  
  let passed = 0;
  let failed = 0;
  
  // Tests de la API
  const tests = [
    {
      name: 'API de sugerencias para estudiantes',
      url: `${BASE_URL}/api/suggestions?userType=estudiante`,
      validate: (data) => data.success && data.data.suggestions.length > 0
    },
    {
      name: 'API de sugerencias para aspirantes',
      url: `${BASE_URL}/api/suggestions?userType=aspirante`,
      validate: (data) => data.success && data.data.suggestions.length > 0
    },
    {
      name: 'API de sugerencias para docentes',
      url: `${BASE_URL}/api/suggestions?userType=docente`,
      validate: (data) => data.success && data.data.suggestions.length > 0
    },
    {
      name: 'API de sugerencias generales',
      url: `${BASE_URL}/api/suggestions?userType=todos`,
      validate: (data) => data.success && data.data.suggestions.length > 0
    },
    {
      name: 'API de todas las sugerencias',
      url: `${BASE_URL}/api/suggestions/all`,
      validate: (data) => data.success && data.data.totalSuggestions > 0
    }
  ];
  
  for (const test of tests) {
    try {
      console.log(`‚è≥ Probando: ${test.name}`);
      
      const response = await fetch(test.url);
      const data = await response.json();
      
      if (response.ok && test.validate(data)) {
        console.log(`‚úÖ ${test.name} - PAS√ì`);
        console.log(`   ‚Üí ${data.data.totalSuggestions || data.data.suggestions?.length || 0} sugerencias generadas\n`);
        passed++;
      } else {
        console.log(`‚ùå ${test.name} - FALL√ì`);
        console.log(`   ‚Üí Status: ${response.status}, Success: ${data.success}\n`);
        failed++;
      }
      
    } catch (error) {
      console.log(`‚ùå ${test.name} - ERROR`);
      console.log(`   ‚Üí ${error.message}\n`);
      failed++;
    }
  }
  
  // Test del frontend
  try {
    console.log('‚è≥ Probando acceso al frontend del chat');
    const response = await fetch(`${BASE_URL}/chat`);
    
    if (response.ok) {
      console.log('‚úÖ Frontend del chat - ACCESIBLE');
      passed++;
    } else {
      console.log('‚ùå Frontend del chat - NO ACCESIBLE');
      failed++;
    }
  } catch (error) {
    console.log('‚ùå Frontend del chat - ERROR');
    console.log(`   ‚Üí ${error.message}`);
    failed++;
  }
  
  console.log(`\n${'='.repeat(50)}`);
  console.log('üìä RESUMEN DE VALIDACI√ìN');
  console.log(`${'='.repeat(50)}`);
  console.log(`‚úÖ Pruebas exitosas: ${passed}`);
  console.log(`‚ùå Pruebas fallidas: ${failed}`);
  console.log(`üìà Tasa de √©xito: ${((passed / (passed + failed)) * 100).toFixed(1)}%`);
  
  if (failed === 0) {
    console.log(`\nüéâ ¬°Todos los tests pasaron! Sistema completamente funcional.`);
  } else {
    console.log(`\n‚ö†Ô∏è  Hay ${failed} problemas que requieren atenci√≥n.`);
  }
  
  console.log('\nüîó URLs para pruebas manuales:');
  console.log(`   ‚Ä¢ Chat: ${BASE_URL}/chat`);
  console.log(`   ‚Ä¢ API Aspirantes: ${BASE_URL}/api/suggestions?userType=aspirante`);
  console.log(`   ‚Ä¢ API Estudiantes: ${BASE_URL}/api/suggestions?userType=estudiante`);
  console.log(`   ‚Ä¢ API Docentes: ${BASE_URL}/api/suggestions?userType=docente`);
  console.log(`   ‚Ä¢ API Todas: ${BASE_URL}/api/suggestions/all`);
  
  return failed === 0;
}

// Validar calidad de las sugerencias
async function validateSuggestionQuality() {
  console.log('\nüîç Validando calidad de las sugerencias...');
  
  try {
    const response = await fetch(`${BASE_URL}/api/suggestions?userType=aspirante`);
    const data = await response.json();
    
    if (data.success && data.data.suggestions) {
      const suggestions = data.data.suggestions;
      
      console.log(`üìù Analizando ${suggestions.length} sugerencias para aspirantes:`);
      
      const qualityChecks = {
        notEmpty: suggestions.every(s => s.question && s.question.trim().length > 0),
        hasCategory: suggestions.every(s => s.category),
        hasConfidence: suggestions.every(s => typeof s.confidence === 'number'),
        properFormat: suggestions.every(s => s.question.endsWith('?')),
        relevantContent: suggestions.some(s => 
          s.question.toLowerCase().includes('aspirante') ||
          s.question.toLowerCase().includes('admision') ||
          s.question.toLowerCase().includes('inscripc')
        )
      };
      
      console.log(`   ‚úì No vac√≠as: ${qualityChecks.notEmpty ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ‚úì Tienen categor√≠a: ${qualityChecks.hasCategory ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ‚úì Tienen confianza: ${qualityChecks.hasConfidence ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ‚úì Formato de pregunta: ${qualityChecks.properFormat ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ‚úì Contenido relevante: ${qualityChecks.relevantContent ? '‚úÖ' : '‚ùå'}`);
      
      // Mostrar ejemplos
      console.log('\nüìã Ejemplos de sugerencias generadas:');
      suggestions.slice(0, 3).forEach((s, i) => {
        console.log(`   ${i + 1}. "${s.question}" (confianza: ${s.confidence.toFixed(2)})`);
      });
      
    } else {
      console.log('‚ùå No se pudieron obtener sugerencias para validar calidad');
    }
    
  } catch (error) {
    console.log(`‚ùå Error validando calidad: ${error.message}`);
  }
}

// Ejecutar validaci√≥n
async function main() {
  const isSystemOk = await validateSuggestionsSystem();
  
  if (isSystemOk) {
    await validateSuggestionQuality();
  }
  
  process.exit(isSystemOk ? 0 : 1);
}

main().catch(console.error);